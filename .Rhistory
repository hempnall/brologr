abc <- ( 1 , 2 , 3 )
abc <- c( 1 , 2 , 3 )
install.packages(tidyverse)
install.packages("tidyverse)
w
;
;;;;;;;;;
exig
>
install.packages("tidyverse)
install.packages("tidyverse")
mpg
package(tidyverse)
library(tidyverse)
mpg
ggplot( data=mpg ) +
geom_point( mapping=aes( x=displ , y=hwy , colour=manufacturer) )
geom_point( mapping=aes( x=displ , y=hwy , colour=manufacturer) )
geom_point( mapping=aes( x=displ , y=hwy , shape=manufacturer) )
ggplot( data=mpg ) +
geom_point( mapping=aes( x=displ , y=hwy , shape=manufacturer) )
ggplot( data=mpg ) +
geom_point( mapping=aes( x=displ , y=hwy) )
ggplot( data=mpg ) +
geom_point( mapping=aes( x=displ , y=hwy) ) +
facet_wrap( ~manufacturer , ncol=4 )
draw_graph <- {}
draw_graph <- {
ggplot( data=mpg ) +
geom_point( mapping=aes( x=displ , y=hwy , colour=manufacturer) )
}
draw_graph
add_geoip_to_dataframe <- function( data  ) {
data$long_tx <- as.numeric( freegeoip( data$tx_hosts  )$longitude )
data$long_rx <- as.numeric( freegeoip( data$rx_hosts  )$longitude )
data$latt_tx <- as.numeric( freegeoip( data$tx_hosts  )$latitude )
data$latt_rx <- as.numeric( freegeoip( data$rx_hosts  )$latitude )
}
add_geoip_to_dataframe( fd )
freegeoip <- function( ip , format = ifelse(length(ip)==1,'list','dataframe'))
{
if (1 == length(ip))
{
# a single IP address
require(rjson)
url <- paste(c("http://192.168.99.100:8080/json/", ip ), collapse='')
ret <- fromJSON(readLines(url, warn=FALSE))
if (format == 'dataframe')
ret <- data.frame(t(unlist(ret)))
return(ret)
} else {
ret <- data.frame()
for (i in 1:length(ip))
{
r <- freegeoip(ip[i], format="dataframe")
ret <- rbind(ret, r)
}
return(ret)
}
}
add_geoip_to_dataframe( fd )
View(fd)
View(fd)
getwd()
setwd("/Users/James/dev/r/brologs")
fd <- read.csv( "file.log.rdf" , sep="\t" )
fd <- read.csv( "files.log.rdf" , sep="\t" )
View(fd)
add_geoip_to_dataframe( fd )
add_geoip_to_dataframe( fd )
add_geoip_to_dataframe <- function( data  ) {
data <- transform(  data , tx_hosts=as.character(tx_hosts) , rx_hosts=as.character(rx_hosts) )
data$long_tx <- as.numeric( freegeoip( data$tx_hosts  )$longitude )
data$long_rx <- as.numeric( freegeoip( data$rx_hosts  )$longitude )
data$latt_tx <- as.numeric( freegeoip( data$tx_hosts  )$latitude )
data$latt_rx <- as.numeric( freegeoip( data$rx_hosts  )$latitude )
}
add_geoip_to_dataframe( fd )
add_geoip_to_dataframe <- function( data  ) {
data <- transform(  data , tx_hosts=as.character(tx_hosts) , rx_hosts=as.character(rx_hosts) )
data$long_tx <- as.numeric( freegeoip( data$tx_hosts  )$longitude )
data$long_rx <- as.numeric( freegeoip( data$rx_hosts  )$longitude )
data$latt_tx <- as.numeric( freegeoip( data$tx_hosts  )$latitude )
data$latt_rx <- as.numeric( freegeoip( data$rx_hosts  )$latitude )
return data
}
add_geoip_to_dataframe <- function( data  ) {
data <- transform(  data , tx_hosts=as.character(tx_hosts) , rx_hosts=as.character(rx_hosts) )
data$long_tx <- as.numeric( freegeoip( data$tx_hosts  )$longitude )
data$long_rx <- as.numeric( freegeoip( data$rx_hosts  )$longitude )
data$latt_tx <- as.numeric( freegeoip( data$tx_hosts  )$latitude )
data$latt_rx <- as.numeric( freegeoip( data$rx_hosts  )$latitude )
return( data )
}
add_geoip_to_dataframe( fd )
fd <- add_geoip_to_dataframe( fd )
as.numeric.factor <- function(x) {as.numeric(levels(x))[x]}
add_geoip_to_dataframe <- function( data  ) {
data <- transform(  data , tx_hosts=as.character(tx_hosts) , rx_hosts=as.character(rx_hosts) )
data$long_tx <- as.numeric.factor( freegeoip( data$tx_hosts  )$longitude )
data$long_rx <- as.numeric.factor( freegeoip( data$rx_hosts  )$longitude )
data$latt_tx <- as.numeric.factor( freegeoip( data$tx_hosts  )$latitude )
data$latt_rx <- as.numeric.factor( freegeoip( data$rx_hosts  )$latitude )
return( data )
}
fd <- add_geoip_to_dataframe( fd )
add_geoip_to_dataframe <- function( data  ) {
data <- transform(  data , tx_hosts=as.character(tx_hosts) , rx_hosts=as.character(rx_hosts) )
data$long_tx <- as.numeric.factor( freegeoip( data$tx_hosts  )$longitude )
data$latt_tx <- as.numeric.factor( freegeoip( data$tx_hosts  )$latitude )
data$long_rx <- as.numeric.factor( freegeoip( data$rx_hosts  )$longitude )
data$latt_rx <- as.numeric.factor( freegeoip( data$rx_hosts  )$latitude )
return( data )
}
fd <- add_geoip_to_dataframe( fd )
fd$long_tx <- NULL
fd$long_rx <- NULL
fd$latt_rx <- NULL
fd$latt_tx <- NULL
fd <- add_geoip_to_dataframe( fd )
?readBin
read.bin.file <- function(filename  ) {
zz <- file("test.bin" ,"rb" )
c <- readBin(zz , integer() ,2 , size=4);
close(zz)
unlink("test.bin")
return ( c )
}
read.bin.file(  "df")
read.bin.file <- function(filename  ) {
zz <- file("test.bin" ,"rb" )
c <- readBin(zz , integer() ,1 , size=2);
close(zz)
unlink("test.bin")
return ( c )
}
read.bin.file(  "df")
read.bin.file(  "df")
read.bin.file <- function(filename  ) {
zz <- file("test.bin" ,"rb" )
c <- readBin(zz , integer() ,8 , size=1);
close(zz)
# unlink("test.bin")
return ( c )
}
read.bin.file(  "df")
read.bin.file <- function(filename  ) {
zz <- file("test.bin" ,"rb" )
c <- readBin(zz , integer() ,8 , size=1);
close(zz)
# unlink("test.bin")
return ( c )
}
read.bin.file(  "df")
read.bin.file(  "df")
?scan
scan("files.log" , skip=6 , nlines = 1)
scan("files.log" , skip=6 , nlines = 1 , sep="`t")
scan("files.log" , skip=6 , nlines = 1 , sep="\t")
scan("files.log" , skip=6 , nlines = 1 , sep="\t" , what=character)
scan("files.log" , skip=6 , nlines = 1 , sep="\t" , what="character")
headers_of_bro_file <- function(  file_nm ) {
field_names <-  scan(file_nm , skip=6 , nlines = 1 , sep="\t" , what="character")
return (field_names[-1])
}
headers_of_bro_file( "files.log" )
headers_of_bro_file( "conn.log" )
?read.table
body_of_bro_file <-  function( file_nm ) {
data <- read.table( file_nm , skip=8  , header=FALSE )
return ( data )
}
brolog.to.dataframe <- function(  file_nm ) {
fields <- headers_of_bro_file( file_nm )
data <- body_of_bro_file( file_nm )
names(data) <- fields
return ( data )
}
brolog.to.dataframe( "weird.log" )
brolog.to.dataframe( "files.log" )
files_log <- brolog.to.dataframe( "files.log" )
View(files_log)
freegeoip( files_log$tx_hosts )
freegeoip( as.character(  files_log$tx_hosts ) )
files_log <- cbind(  freegeoip( as.character(  files_log$tx_hosts ) ) , files_log)
?readBin
read.bin.file <- function(filename  ) {
zz <- file("test.bin" ,"rb" )
while ( length(c <- readBin(zz,integer(),1,size = 1)) > 0) {
c
}
close(zz)
# unlink("test.bin")
return ( c )
}
read.bin.file("sd")
?readBin
read.bin.file <- function(filename  ) {
zz <- file("test.bin" ,"rb" )
while ( length(c <- readBin(zz,integer(),n=1,size = 1)) > 0) {
c
}
close(zz)
# unlink("test.bin")
return ( c )
}
read.bin.file("sd")
read.bin.file <- function(filename  ) {
zz <- file("test.bin" ,"rb" )
while ( length(c <- readBin(zz,integer(),n=1,size = 1)) > 0) {
print (  c )
}
close(zz)
# unlink("test.bin")
return ( c )
}
read.bin.file("sd")
install.packages("iptools")
library(iptools)
?iptools
home_net <- c( "192.168.204.0/24"  )
ip_in_range( "192.168.204.34" , home_net )
ip_in_range( "192.168.203.34" , home_net )
fd[,"tx_hosts"]
fd["tx_hosts"]
add_local_remote_to_dataframe <- function( dataframe , ip1 , ip2    ) {
require(iptools)
dataframe$local_ip <- ifelse( ip_in_range( dataframe[ip1] , home_net ) , dataframe[ip1] , dataframe[ip2]  )
dataframe$remote_ip <- ifelse( ip_in_range( dataframe[ip1] , home_net ) , dataframe[ip2], dataframe[ip1]  )
return ( dataframe )
}
add_local_remote_to_dataframe(  fd , "tx_hosts" , "rx_hosts" )
add_local_remote_to_dataframe <- function( dataframe , ip1 , ip2    ) {
require(iptools)
dataframe$local_ip <- ifelse( ip_in_range( dataframe[ip1] , home_net ) , dataframe[,ip1] , dataframe[,ip2]  )
dataframe$remote_ip <- ifelse( ip_in_range( dataframe[ip1] , home_net ) , dataframe[,ip2], dataframe[,ip1]  )
return ( dataframe )
}
add_local_remote_to_dataframe(  fd , "tx_hosts" , "rx_hosts" )
add_local_remote_to_dataframe <- function( dataframe , ip1 , ip2    ) {
require(iptools)
dataframe$local_ip <- ifelse( ip_in_range( dataframe[,ip1] , home_net ) , dataframe[,ip1] , dataframe[,ip2]  )
dataframe$remote_ip <- ifelse( ip_in_range( dataframe[,ip1] , home_net ) , dataframe[,ip2], dataframe[,ip1]  )
return ( dataframe )
}
add_local_remote_to_dataframe(  fd , "tx_hosts" , "rx_hosts" )
files_log <- add_local_remote_to_dataframe(  fd , "tx_hosts" , "rx_hosts" )
library( ggmap )
mapWorld <- borders("world", colour="gray50", fill="gray50") # create a layer of borders
mp <- ggplot + mapWorld
mp <- ggplot() + mapWorld
mp
add_geoip_to_dataframe_col <- function( data ,col_name ) {
lat_field <- paste(  "lat_" , col_name  )
long_field <- paste(  "lat_" , col_name  )
data[,lat_field] <-     as.numeric.factor( freegeoip( data[, col_name  ]  )$longitude )
data[ , long_field ] <- as.numeric.factor( freegeoip( data[, col_name ] )$latitude )
return( data )
}
files_log <- add_geoip_to_dataframe_col(  files_log ,  "remote_ip" )
add_geoip_to_dataframe_col <- function( data ,col_name ) {
lat_field <- paste(  "lat_" , col_name  )
long_field <- paste(  "long_" , col_name  )
data[,lat_field] <-     as.numeric.factor( freegeoip( data[, col_name  ]  )$longitude )
data[ , long_field ] <- as.numeric.factor( freegeoip( data[, col_name ] )$latitude )
return( data )
}
files_log <- add_geoip_to_dataframe_col(  files_log ,  "remote_ip" )
mp + geom_point( files_log , aes(  x=long_remote_ip , y=lat_remote_ip )    )
mp + geom_point( aes(  x=files_log.long_remote_ip , y=files_log.lat_remote_ip )    )
mp <- ggplot(files_log) + mapWorld
mp
mp + geom_point(  aes( x=long_remote_ip , y=lat_remote_ip ) )
mp + geom_point(  aes( x=long_rx , y=latt_rx ) )
names(files_log)
paste( "123" ,"456")
paste( "123" ,"456",sep="")
add_geoip_to_dataframe_col <- function( data ,col_name ) {
lat_field <- paste(  "lat_" , col_name  , sep="")
long_field <- paste(  "long_" , col_name , sep=""  )
data[,lat_field] <-     as.numeric.factor( freegeoip( data[, col_name  ]  )$longitude )
data[ , long_field ] <- as.numeric.factor( freegeoip( data[, col_name ] )$latitude )
return( data )
}
files_log$`lat_ remote_ip` <- NULL
files_log$`long_ remote_ip` <- NULL
files_log <- add_geoip_to_dataframe_col( files_log , "remote_ip" )
mp + geom_point(  aes( x=long_remote_ip , y=lat_remote_ip ) )
mp <- ggplot(files_log) + mapWorld
mp + geom_point(  aes( x=long_remote_ip , y=lat_remote_ip ) )
mp + geom_point(  aes( x=lat_remote_ip , y=long_remote_ip ) )
mp + geom_point(  aes( x=lat_remote_ip , y=long_remote_ip , colour=mime_type) )
mp + geom_point(  aes( x=lat_remote_ip , y=long_remote_ip , size=total_bytes) )
mp + geom_point(  aes( x=lat_remote_ip , y=long_remote_ip , colour=mime_type) )
add_geoip_to_dataframe_col <- function( data ,col_name ) {
lat_field <- paste(  "lat_" , col_name  , sep="")
long_field <- paste(  "long_" , col_name , sep=""  )
data[,lat_field] <-     as.numeric.factor( freegeoip( data[, col_name  ]  )$latitude )
data[ , long_field ] <- as.numeric.factor( freegeoip( data[, col_name ] )$longitude )
return( data )
}
files_log <- add_geoip_to_dataframe_col( files_log , "remote_ip" )
mp + geom_point(  aes( x=long_remote_ip , y=lat_remote_ip ) )
mp <- ggplot(files_log) + mapWorld
mp + geom_point(  aes( x=long_remote_ip , y=lat_remote_ip ) )
mp + geom_point(  aes( x=long_remote_ip , y=lat_remote_ip , colour=mime_type ) )
